<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>消極女子的部落格</title>
  
  <subtitle>好累</subtitle>
  <link href="http://yihsunphys.github.io/atom.xml" rel="self"/>
  
  <link href="http://yihsunphys.github.io/"/>
  <updated>2023-09-10T10:19:14.385Z</updated>
  <id>http://yihsunphys.github.io/</id>
  
  <author>
    <name>Yihsun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>厭世文</title>
    <link href="http://yihsunphys.github.io/2023/09/10/%E5%8E%AD%E4%B8%96%E6%96%87/"/>
    <id>http://yihsunphys.github.io/2023/09/10/%E5%8E%AD%E4%B8%96%E6%96%87/</id>
    <published>2023-09-10T09:48:29.000Z</published>
    <updated>2023-09-10T10:19:14.385Z</updated>
    
    <content type="html"><![CDATA[<p>要做什麼才可以開心? 我覺得所有的努力也只是為了讓自己不那麼痛苦而已，日常生活就是充滿了不安，什麼事也沒有的平凡日子還是會焦慮恐慌，總是在尋找甚麼美好的事物能將自己留住，可惜總是稍縱即逝，或許根本沒有這種東西吧。 在痛苦的日子裡，只能期盼未來會有美好的日子來臨，若不這樣相信，好像就沒有理由繼續下去了。<br>跟人講話都覺得好累，連看到人都會怕，好不容易跟人建立關係，總是被自己搞砸，只要太靠近自己就想退縮，因為覺得不可能有人會喜歡自己，一定是假的，如果不趕快離開的話之後被拋棄會更痛苦，人的關係很脆弱，表面上好的人背後卻是憎恨，我覺得很可怕，世界上一定是沒有真心相待這種東西的，大家都只會為了自己的利益，社交也只是為了讓自己顯得不可憐，一想到不小心做錯甚麼事就可能被討厭，我就很害怕。其實每次進教室前都會喘不過氣，從國中就這樣了，因為害怕面對一大群人，高中每天就是這樣過來的，一天一天還是過完了，雖然現在也好不了多少。日子很難過，但有時候在網路上看到很多人過的比我更慘時，就很慶幸還有一大群人跟我一樣，心理會得到慰藉，知道大家都過得很痛苦。</p><p>如今的我，談不上幸福，也談不上不幸。一切都會過去的。<br>我仍然認為向人訴苦不過是徒勞，與其如此，不如默默承受。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要做什麼才可以開心? 我覺得所有的努力也只是為了讓自己不那麼痛苦而已，日常生活就是充滿了不安，什麼事也沒有的平凡日子還是會焦慮恐慌，總是在尋找甚麼美好的事物能將自己留住，可惜總是稍縱即逝，或許根本沒有這種東西吧。 在痛苦的日子裡，只能期盼未來會有美好的日子來臨，若不這樣相信</summary>
      
    
    
    
    <category term="雜記" scheme="http://yihsunphys.github.io/categories/%E9%9B%9C%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2023-09-week2</title>
    <link href="http://yihsunphys.github.io/2023/09/10/23-09-w2/"/>
    <id>http://yihsunphys.github.io/2023/09/10/23-09-w2/</id>
    <published>2023-09-10T09:37:25.000Z</published>
    <updated>2023-09-10T09:47:37.523Z</updated>
    
    <content type="html"><![CDATA[<p>09&#x2F;04: 我覺得人生沒有希望，我只能活在虛實交錯的幻想之中來麻痺自己<br>09&#x2F;05: 我覺得我考不上我想要的學校，我也不知道我想要甚麼<br>09&#x2F;06: 覺得自己甚麼經歷都沒有，覺得自己很爛，作惡夢<br>09&#x2F;07: 跟高中同學出去，已經變成懶得跟任何人出去玩了<br>09&#x2F;08: 沒讀書，只會擔憂未來<br>09&#x2F;09: 沒讀書<br>09&#x2F;10: 雖然說開學真的沒有甚麼事，但一回到新竹就沒來由地憂鬱了，像憂鬱症的那種感覺</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;09&amp;#x2F;04: 我覺得人生沒有希望，我只能活在虛實交錯的幻想之中來麻痺自己&lt;br&gt;09&amp;#x2F;05: 我覺得我考不上我想要的學校，我也不知道我想要甚麼&lt;br&gt;09&amp;#x2F;06: 覺得自己甚麼經歷都沒有，覺得自己很爛，作惡夢&lt;br&gt;09&amp;#x2F;07: 跟高</summary>
      
    
    
    
    <category term="日記" scheme="http://yihsunphys.github.io/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>研究所選擇</title>
    <link href="http://yihsunphys.github.io/2023/09/01/%E7%A0%94%E7%A9%B6%E6%89%80/"/>
    <id>http://yihsunphys.github.io/2023/09/01/%E7%A0%94%E7%A9%B6%E6%89%80/</id>
    <published>2023-09-01T14:41:52.000Z</published>
    <updated>2023-09-01T15:23:40.801Z</updated>
    
    <content type="html"><![CDATA[<p>從大二下就對研究所做了很多功課，查愈多資料，就愈喪失讀物理所的慾望，反正我就很容易被其他人的說法影響吧，而且理想這種東西又不能當飯吃，不然我就去讀哲學所了，雖然說選擇自己的興趣比較重要，但我也不知道我對甚麼有興趣，對錢有興趣也可以吧? 說實話，如果現在讓我重選科系，我可能不會選物理，反正我不可能在物理上得到甚麼成就(以前太高估自己了，還想去國外讀博回國當教授)，就選擇容易找到工作的科系吧(選擇比較多) <span id="more"></span></p><p>第一志願: 台大eda<br>第二志願: 台大電機丙<br>第三志願: 清交資工<br>第四志願: 成大電機 資工<br>第五志願: 交大電子甲<br>保底: 清大物理所</p><p>沒寫台大資工單純因為我覺得不可能上(壓力也太大)，然後我覺得第三志願以後推甄就上機會都蠻大的，然後我就會糾結要不要考試&#x3D; &#x3D;<br>好想上台大eda 大家都說讀eda出來可以做養肝的工作&gt; &lt; 而且我們程設老師就在synopsys工作 感覺好棒 ，真的不喜歡(或公司關掉)還可以轉純軟去寫程式不怕餓死，硬體也略懂可以進台積電? 進可攻退可守，適合我這種甚麼都想要的人，完美，而且eda也不如ic設計那麼熱門，對我來說考上的機率大一點。ic design單純是錢真的很多，但我錢只要略多就好了，但真的不想要太累，不然可能會死</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;從大二下就對研究所做了很多功課，查愈多資料，就愈喪失讀物理所的慾望，反正我就很容易被其他人的說法影響吧，而且理想這種東西又不能當飯吃，不然我就去讀哲學所了，雖然說選擇自己的興趣比較重要，但我也不知道我對甚麼有興趣，對錢有興趣也可以吧? 說實話，如果現在讓我重選科系，我可能不會選物理，反正我不可能在物理上得到甚麼成就(以前太高估自己了，還想去國外讀博回國當教授)，就選擇容易找到工作的科系吧(選擇比較多)</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>物件導向 OOP</title>
    <link href="http://yihsunphys.github.io/2023/08/31/OOP/"/>
    <id>http://yihsunphys.github.io/2023/08/31/OOP/</id>
    <published>2023-08-30T16:54:02.000Z</published>
    <updated>2023-09-01T15:23:22.582Z</updated>
    
    <content type="html"><![CDATA[<p>資料和函數是物件(object)的屬性(properties)，而不是像以前在結構化程式設計 (structured programming) 中所認為的物件(object)是函數參數。</p><p>class和struct充分展現 C++ 物件導向程式設計的精神，與 C 的 struct 類似，但 struct 不能包含函數 (在 C 中，在 C++ 中可以，只是默認成員為public)。<br>背後最核心的概念是資料封裝</p><p>class內可以有member function 和 data member，其中member function的定義可以直接寫在class內(inline)或只先定義原型，在class外再完整定義他，但要注意加上範圍運算子::<span id="more"></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#define RECTANGLE_H</span><br><span class="line">//class宣告在int main()外 或另寫.h檔</span><br><span class="line">class Rectangle &#123; </span><br><span class="line">        public:</span><br><span class="line">            Rectangle() &#123;&#125;; //定義空運算子 以便宣告Rectangle temp</span><br><span class="line">            Rectangle(int, int, int, int);  //建構子一定在public</span><br><span class="line">            //~Rectangle();</span><br><span class="line">            int getweight();</span><br><span class="line">            Rectangle operator+(Rectangle); //運算子重載函數</span><br><span class="line">            int address();</span><br><span class="line">        private:</span><br><span class="line">            int xLow, yLow, height, weight; //遍數通常放private</span><br><span class="line">&#125;;  //注意要有分號</span><br><span class="line"></span><br><span class="line">//函數的定義也可放在.cpp檔</span><br><span class="line">int Rectangle::getweight() &#123;</span><br><span class="line">    return weight;</span><br><span class="line">&#125;</span><br><span class="line">//定義建構子 </span><br><span class="line">Rectangle::Rectangle(int a, int b, int c, int d) &#123;</span><br><span class="line">    xLow = a;</span><br><span class="line">    yLow = b;</span><br><span class="line">    height = c;</span><br><span class="line">    weight = d;</span><br><span class="line">&#125;</span><br><span class="line">//運算子重載  </span><br><span class="line">Rectangle Rectangle::operator+(Rectangle r2) &#123;</span><br><span class="line">    Rectangle temp;</span><br><span class="line">    temp.xLow = xLow + r2.xLow;</span><br><span class="line">    temp.yLow = xLow + r2.yLow;</span><br><span class="line">    temp.height = height + r2.height;</span><br><span class="line">    temp.weight = xLow + r2.weight;</span><br><span class="line">    return(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Rectangle::address()&#123;</span><br><span class="line">    return int(this); //this是該物件的位址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="權限範圍"><a href="#權限範圍" class="headerlink" title="權限範圍"></a>權限範圍</h3><ul><li>public:<br>所有人都可使用此member function 或 data member</li><li>private:<br>此class type 內的成員可使用此member function 或 data member</li><li>protected:<br>此class type 內的成員或friend class或子類別可使用此member function 或 data member</li></ul><h3 id="Constructors-and-Destructors-建構子與解構子"><a href="#Constructors-and-Destructors-建構子與解構子" class="headerlink" title="Constructors and Destructors (建構子與解構子)"></a>Constructors and Destructors (建構子與解構子)</h3><p>當要生成一個 class 的新的物件的時候或給該 class 的一個物件分配記憶體的時候，這個建構子將自動被調用。若沒有特別寫則有預設建構子(空建構子&amp;複製建構子)</p><p>解構子特別適用於當一個物件被動態分別記憶體空間，而在物件被銷毀的時我們希望釋放它所佔用的空間的時候。</p><p>若要自定義複製建構子，參數必須是const reference</p><h3 id="類別指標"><a href="#類別指標" class="headerlink" title="類別指標"></a>類別指標</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    Rectangle r1(1, 1, 1, 1);</span><br><span class="line">    Rectangle *r2 = new Rectangle(2, 2, 2, 2); //類別指標</span><br><span class="line">    Rectangle r3(2, 2, 2, 2);</span><br><span class="line">    cout &lt;&lt; r1.getweight();</span><br><span class="line">    cout &lt;&lt; r2-&gt;getweight();</span><br><span class="line">    Rectangle r4(1, 1, 1, 1);</span><br><span class="line">    r4 = r1 + r3;</span><br><span class="line">    cout &lt;&lt; r4.getweight();</span><br><span class="line">    cout &lt;&lt; r4.address();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="運算子重載"><a href="#運算子重載" class="headerlink" title="運算子重載"></a>運算子重載</h3><p>要想重載一個運算子，我們只需要編寫一個成員函數，名為 operator ，後面跟我們要重載的運算子<br>運算子重載  注意class裡面也要宣告函數<br>回傳型態 結構名稱::operator符號(型態 參數)<br>基本運算: + - * &#x2F; &amp; - 位元運算: &amp; | ^ ~ &gt;&gt; &lt;&lt;<br>布林運算: &amp;&amp; || ! 遞增運算: ++ - - 賦值: &#x3D;&#x3D; &#x3D;</p><h4 id="二元運算子重載範例"><a href="#二元運算子重載範例" class="headerlink" title="二元運算子重載範例"></a>二元運算子重載範例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Rectangle Rectangle::operator+(Rectangle r2)&#123;</span><br><span class="line">    Rectangle temp;</span><br><span class="line">    temp.xLow = xLow + r2.xLow;</span><br><span class="line">    temp.yLow = xLow + r2.yLow;</span><br><span class="line">    temp.height = height + r2.height;</span><br><span class="line">    temp.weight = xLow + r2.weight;</span><br><span class="line">    return(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct point&#123;</span><br><span class="line">  int x, y;</span><br><span class="line">  point(int x = 0, int y = 0);</span><br><span class="line">  bool operator==(point other);</span><br><span class="line">&#125;;</span><br><span class="line">bool point::operator==(point other) &#123;</span><br><span class="line">  return x == other.x &amp;&amp; y == other.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sort與重載小於運算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct point&#123;</span><br><span class="line">  int x, y;</span><br><span class="line">  point(int x = 0, int y = 0);</span><br><span class="line">  bool operator&lt;(point other);</span><br><span class="line">&#125;;</span><br><span class="line">bool point::operator&lt;(point other) &#123;</span><br><span class="line">  return (x + y) &lt; (other.x + other.y);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">  point arr[] = &#123;&#123;1, 9&#125;, &#123;6, 2&#125;, &#123;4, 3&#125;, &#123;5, 1&#125;&#125;;</span><br><span class="line">  sort(arr, arr+4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: 有加const關鍵字就不能呼叫任何struct內函數<br>若想要呼叫則需在函數()後加上const</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct point&#123;</span><br><span class="line">  int x, y;</span><br><span class="line">  int sum() const &#123;</span><br><span class="line">    return x+y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">bool point::operator&lt;(const point &amp;other) const &#123;</span><br><span class="line">  return sum() &lt; other.sum();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一元運算子重載範例"><a href="#一元運算子重載範例" class="headerlink" title="一元運算子重載範例"></a>一元運算子重載範例</h4><p>– – x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct point&#123;</span><br><span class="line">  int x, y;</span><br><span class="line">  point(int x = 0, int y = 0);</span><br><span class="line">  point&amp; operator--();</span><br><span class="line">&#125;;</span><br><span class="line">point&amp; point::operator--() &#123;</span><br><span class="line">  x-=1;</span><br><span class="line">  y-=1;</span><br><span class="line">  return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x – –</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct point&#123;</span><br><span class="line">  int x, y;</span><br><span class="line">  point(int x = 0, int y = 0);</span><br><span class="line">  point operator--(int);</span><br><span class="line">&#125;;</span><br><span class="line">point point::operator--(int) &#123;</span><br><span class="line">  point ans = *this; </span><br><span class="line">  x-=1;</span><br><span class="line">  y-=1;</span><br><span class="line">  return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="轉型運算子重載範例"><a href="#轉型運算子重載範例" class="headerlink" title="轉型運算子重載範例"></a>轉型運算子重載範例</h4><p>operator 目標型態() const</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct point &#123;</span><br><span class="line">  int x, y;</span><br><span class="line">  point(int _x, int _y) &#123;</span><br><span class="line">    x = _x;</span><br><span class="line">    y = _y;</span><br><span class="line">  &#125;</span><br><span class="line">  operator int() const;</span><br><span class="line">&#125;;</span><br><span class="line">point::operator int() const &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p>因為一般來說 reference 占用 8 Byte，當 struct 大小大於 8 Byte 的時候使用 const reference可以減少參數複製的空間和時間</p><h3 id="pair-簡化的struct"><a href="#pair-簡化的struct" class="headerlink" title="pair: 簡化的struct"></a>pair: 簡化的struct</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;int,int&gt; p;</span><br><span class="line">p.first = 1;</span><br><span class="line">p.second = 2;</span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; &quot; &quot; &lt;&lt; p.second &lt;&lt; endl;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;資料和函數是物件(object)的屬性(properties)，而不是像以前在結構化程式設計 (structured programming) 中所認為的物件(object)是函數參數。&lt;/p&gt;
&lt;p&gt;class和struct充分展現 C++ 物件導向程式設計的精神，與 C 的 struct 類似，但 struct 不能包含函數 (在 C 中，在 C++ 中可以，只是默認成員為public)。&lt;br&gt;背後最核心的概念是資料封裝&lt;/p&gt;
&lt;p&gt;class內可以有member function 和 data member，其中member function的定義可以直接寫在class內(inline)或只先定義原型，在class外再完整定義他，但要注意加上範圍運算子::</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>stl-container</title>
    <link href="http://yihsunphys.github.io/2023/08/29/stl-container/"/>
    <id>http://yihsunphys.github.io/2023/08/29/stl-container/</id>
    <published>2023-08-28T17:45:32.000Z</published>
    <updated>2023-08-28T17:50:18.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h1><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>自動排序，不允許重複的元素<br>常用的函數有insert(), erase(), count(), find()<br><a href="https://zerojudge.tw/ShowProblem?problemid=f277">zerojudge 字典</a></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/*---------------------------*/</span><br><span class="line">int main()&#123;IOS;</span><br><span class="line">   int n;</span><br><span class="line">   cin &gt;&gt; n;</span><br><span class="line">   set &lt;string&gt; c;</span><br><span class="line">   string s;</span><br><span class="line">   while (n--) &#123;</span><br><span class="line">      cin &gt;&gt; s;</span><br><span class="line">      c.insert(s);</span><br><span class="line">   &#125;</span><br><span class="line">   int q;</span><br><span class="line">   cin &gt;&gt; q;</span><br><span class="line">   while(q--)&#123;</span><br><span class="line">      cin &gt;&gt; s;</span><br><span class="line">      if (!c.count(s)) &#123; </span><br><span class="line">         c.insert(s);</span><br><span class="line">         cout &lt;&lt; &quot;no\n&quot;;</span><br><span class="line">         &#125;</span><br><span class="line">      else cout &lt;&lt; &quot;yes\n&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">   /*for(auto &amp;e:c) &#123;</span><br><span class="line">      cout &lt;&lt; e;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   auto search = c.find(&quot;leo&quot;);</span><br><span class="line">   cout &lt;&lt; *search;*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>對照表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map &lt;int, char&gt; m;</span><br><span class="line">m[1] = &#x27;A&#x27;;  //map&lt;1,A&gt;</span><br><span class="line">m[2] = &#x27;a&#x27; ;  //map&lt;2,a&gt;</span><br><span class="line">cout &lt;&lt; m[1] &lt;&lt; &quot; &quot; &lt;&lt; m[2];</span><br></pre></td></tr></table></figure><h2 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h2><h2 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h2><p>multi系列允許重複的元素</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>動態陣列，插入元素後容量會自動增長，但容量可能為2倍(倍增法)，記憶體耗費資源較大</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*-------------------------*/</span><br><span class="line">int main()&#123;</span><br><span class="line">  vector&lt;int&gt; v1, v2;</span><br><span class="line">  for(int i = 0; i &lt; 10; i++)</span><br><span class="line">    v1.push_back(i);</span><br><span class="line">  v2 = v1;</span><br><span class="line">  v2.pop_back();</span><br><span class="line">  for(auto it = v1.begin(); it! = v1.end(); it++)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">  cout &lt;&lt; endl;  </span><br><span class="line">  for(auto &amp;e:v2)</span><br><span class="line">    cout&lt;&lt;e&lt;&lt;&quot; &quot;;  </span><br><span class="line">  cout &lt;&lt; v1.size() &lt;&lt; &quot; &quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; v2.size() &lt;&lt; &quot; &quot; &lt;&lt; v2.capacity() &lt;&lt; endl; </span><br><span class="line">  //預先配置大小 以免浪費記憶體</span><br><span class="line">  vector &lt;int&gt; v3;</span><br><span class="line">  v3.reverse(5);</span><br><span class="line">  v3.push_back(0); v3.push_back(1);</span><br><span class="line">  //shrink_to_fit()可釋放未使用空間</span><br><span class="line">  v3.shrink_to_fit();</span><br><span class="line">  //resize與reverse很像，但會把多餘元素補零 </span><br><span class="line">  v3.resize(5,10) //也可指定初始值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>主要函數用法有 push(), pop()要先確認是否為空否則很容易RE, top(), empty(), size()</p><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>主要函數用法有 push(), pop(), front(), back(), empty(), size()</p><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>雙向的queue，支持隨機訪問</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*--------------------------*/</span><br><span class="line">int main()&#123;</span><br><span class="line">  deque&lt;int&gt; d = &#123;1,2,3&#125;;</span><br><span class="line">  d.pop_front();</span><br><span class="line">  d.push_front(1);</span><br><span class="line">  d.emplace_front(0);</span><br><span class="line">  d.pop_back();</span><br><span class="line">  d.push_back(3);</span><br><span class="line">  d.emplace_back(4);</span><br><span class="line">  for(auto &amp;e: d)</span><br><span class="line">    cout &lt;&lt; e; </span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  //從尾印到頭</span><br><span class="line">  for(auto it = d.rbegin(); it != d.rend(); it++)</span><br><span class="line">    cout &lt;&lt; *it + 1;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  //cbegin/cred回傳東西不可以被修改</span><br><span class="line">  for(auto it = d.crbegin(); it != d.crend(); it++)</span><br><span class="line">    cout &lt;&lt; *it;</span><br><span class="line">  cout &lt;&lt; endl;   </span><br><span class="line">  //支持隨機訪問</span><br><span class="line">  cout &lt;&lt; d[2] &lt;&lt; d.front() &lt;&lt; d.back() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h1><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><h1 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h1><p>速度很慢，不建議使用</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><h2 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h2><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="utility-pair"><a href="#utility-pair" class="headerlink" title="(utility)pair"></a>(utility)pair</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;int,int&gt; p;</span><br><span class="line">p.first = 1;</span><br><span class="line">p.second = 2;</span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; &quot; &quot; &lt;&lt; p.second &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>pair的擴充，可以存更多資料而不用到struct或class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    //初始化</span><br><span class="line">    tuple&lt;string, double, int&gt; t2(&quot;hello&quot;, 0.5, 3); </span><br><span class="line">    tuple&lt;string, double, int&gt; t3(t2); </span><br><span class="line">    tuple&lt;int, double&gt; t4(make_pair(42, 3.14)); </span><br><span class="line">    auto t5 = tuple_cat(t3, t4); // 合併 tuple</span><br><span class="line">    auto t6 = make_tuple(&quot;test&quot;, 123); // 直接使用 make_tuple 合併多個物件</span><br><span class="line"> </span><br><span class="line">    // 取出值的方式</span><br><span class="line">    cout &lt;&lt; tuple_size&lt;decltype(t5)&gt;::value &lt;&lt; endl; // 回傳 t5 中有幾個物件</span><br><span class="line">    cout &lt;&lt; get&lt;4&gt;(t5) &lt;&lt; endl; //拿 index 4 的物件</span><br><span class="line">    double a;</span><br><span class="line">    int b;</span><br><span class="line">    tie(ignore, a, b) = t2; // 解開 tuple 的方式，不用的值可以用 std::ignore</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h2><p>位元運算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*-------------------*/</span><br><span class="line">int main() &#123;</span><br><span class="line">    bitset&lt;10&gt; b(10);</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    string s = &quot;10101&quot;;</span><br><span class="line">    bitset&lt;10&gt; a(s);</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a.size() &lt;&lt; endl;</span><br><span class="line">    //b.any(): 判別是否有1 </span><br><span class="line">    //b.none():</span><br><span class="line">    //b.count(): 1的個數</span><br><span class="line">    //b.flip(pos): 翻轉 ~b[]</span><br><span class="line">    //b.reset(): 設為0</span><br><span class="line">    //b.set(pos, 1);</span><br><span class="line">    //s = b.to_string();</span><br><span class="line">    //unsigned long x = b.to_ulong();</span><br><span class="line">    const int n = 4;</span><br><span class="line">    for(int i = 0; i&lt; (1 &lt;&lt; n); i++) &#123;</span><br><span class="line">        cout &lt;&lt; bitset&lt;n&gt;(i) &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="附錄"><a href="#附錄" class="headerlink" title="附錄"></a>附錄</h1><h2 id="vector實作"><a href="#vector實作" class="headerlink" title="vector實作"></a>vector實作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct MyVector &#123;</span><br><span class="line">  MyVector(size_t n = 0, int data = &#123;&#125;);</span><br><span class="line">  MyVector(const MyVector&amp; other);</span><br><span class="line">  size_t size() const;</span><br><span class="line">  void push_back(int data);</span><br><span class="line">  int&amp; operator[](size_t idx);</span><br><span class="line">  int* begin();</span><br><span class="line">  int* end();</span><br><span class="line"></span><br><span class="line">  size_t n;</span><br><span class="line">  int *arr;</span><br><span class="line">&#125;;</span><br><span class="line">//建構子</span><br><span class="line">MyVector::MyVector(size_t n, int data) &#123;</span><br><span class="line">    this-&gt;n = n;</span><br><span class="line">    this-&gt;arr = new int[n]&#123;&#125;;</span><br><span class="line">    for (int i = 0; i &lt; n; ++i)</span><br><span class="line">      this-&gt;arr[i] = data;</span><br><span class="line">&#125;</span><br><span class="line">//複製</span><br><span class="line">MyVector::MyVector(const MyVector&amp; other) &#123;</span><br><span class="line">    this-&gt;n = other.n;</span><br><span class="line">    this-&gt;arr = new int[n]&#123;&#125;;</span><br><span class="line">    for (int i = 0; i &lt; n; ++i)</span><br><span class="line">      this-&gt;arr[i] = other.arr[i];</span><br><span class="line">&#125;</span><br><span class="line">//size函數</span><br><span class="line">size_t MyVector::size() const &#123;</span><br><span class="line">    return this-&gt;n;</span><br><span class="line">&#125;</span><br><span class="line">//運算子重載[]</span><br><span class="line">int&amp; MyVector::operator[](size_t idx) &#123;</span><br><span class="line">return this-&gt;arr[idx];</span><br><span class="line">&#125;</span><br><span class="line">int* MyVector::begin() &#123;</span><br><span class="line">return this-&gt;arr;</span><br><span class="line">&#125;</span><br><span class="line">int* MyVector::end() &#123;</span><br><span class="line">return this-&gt;arr + this-&gt;n;</span><br><span class="line">&#125;</span><br><span class="line">//push_back函數</span><br><span class="line">void MyVector::push_back(int data) &#123;</span><br><span class="line">    //先建立長度+1的新陣列</span><br><span class="line">    int *new_arr = new int[this-&gt;n + 1]&#123;&#125;;</span><br><span class="line">    //複製原陣列</span><br><span class="line">    for(int i = 0; i &lt; this-&gt;n; ++i)</span><br><span class="line">      new_arr[i] = this-&gt;arr[i];</span><br><span class="line">    //刪除舊資料</span><br><span class="line">    delete this-&gt;arr;</span><br><span class="line">    this-&gt;arr = new_arr;</span><br><span class="line">    this-&gt;arr[n] = data;</span><br><span class="line">    n += 1;</span><br><span class="line">&#125;</span><br><span class="line">/*---------------倍增法----------------*/</span><br><span class="line">struct MyVector &#123;</span><br><span class="line">  MyVector(size_t n = 0, int data = &#123;&#125;);</span><br><span class="line">  MyVector(const MyVector&amp; other);</span><br><span class="line">  size_t size() const;</span><br><span class="line">  void push_back(int data);</span><br><span class="line">  void pop_back();</span><br><span class="line">  int&amp; operator[](size_t idx);</span><br><span class="line">  int* begin();</span><br><span class="line">  int* end();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">  void reallocate();</span><br><span class="line">  </span><br><span class="line">  size_t n;</span><br><span class="line">  //arr實際大小</span><br><span class="line">  size_t m;</span><br><span class="line">  int *arr;</span><br><span class="line">&#125;;</span><br><span class="line">//建構子</span><br><span class="line">MyVector::MyVector(size_t n, int data) &#123;</span><br><span class="line">    this-&gt;n = n;</span><br><span class="line">    this-&gt;m = max(n, size_t(1));</span><br><span class="line">    this-&gt;arr = new int[this-&gt;m]&#123;&#125;;</span><br><span class="line">    for (int i = 0; i &lt; n; ++i)</span><br><span class="line">      this-&gt;arr[i] = data;</span><br><span class="line">&#125;</span><br><span class="line">//複製</span><br><span class="line">MyVector::MyVector(const MyVector&amp; other) &#123;</span><br><span class="line">    this-&gt;n = other.n;</span><br><span class="line">    this-&gt;m = other.m;</span><br><span class="line">    this-&gt;arr = new int[this-&gt;m]&#123;&#125;;</span><br><span class="line">    for (int i = 0; i &lt; n; ++i)</span><br><span class="line">      this-&gt;arr[i] = other.arr[i];</span><br><span class="line">&#125;</span><br><span class="line">//size函數</span><br><span class="line">size_t MyVector::size() const &#123;</span><br><span class="line">    return this-&gt;n;</span><br><span class="line">&#125;</span><br><span class="line">//運算子重載[]</span><br><span class="line">int&amp; MyVector::operator[](size_t idx) &#123;</span><br><span class="line">return this-&gt;arr[idx];</span><br><span class="line">&#125;</span><br><span class="line">int* MyVector::begin() &#123;</span><br><span class="line">return this-&gt;arr;</span><br><span class="line">&#125;</span><br><span class="line">int* MyVector::end() &#123;</span><br><span class="line">return this-&gt;arr + this-&gt;n;</span><br><span class="line">&#125;</span><br><span class="line">void MyVector::reallocate() &#123;</span><br><span class="line">    const size_t growth_factor = 2;</span><br><span class="line">    this-&gt;m *= growth_factor;</span><br><span class="line">    int *new_arr = new int[this-&gt;m]&#123;&#125;;</span><br><span class="line">    for(int i = 0; i &lt; this-&gt;n; ++i)</span><br><span class="line">    new_arr[i] = this-&gt;arr[i];</span><br><span class="line">    delete this-&gt;arr;</span><br><span class="line">    this-&gt;arr = new_arr;</span><br><span class="line">&#125;</span><br><span class="line">//push_back函數</span><br><span class="line">void MyVector::push_back(int data) &#123;</span><br><span class="line">    if (this-&gt;n == this-&gt;m)</span><br><span class="line">      this-&gt;reallocate();</span><br><span class="line">    this-&gt;arr[n] = data;</span><br><span class="line">    n += 1;</span><br><span class="line">&#125;</span><br><span class="line">void MyVector::pop_back()&#123;</span><br><span class="line">  --n;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    MyVector A(5, 7);</span><br><span class="line">    MyVector B = A, C;</span><br><span class="line">    C = B;</span><br><span class="line">    C.push_back(3);</span><br><span class="line">    sort(C.begin(), C.end());</span><br><span class="line">    for (int i = 0; i &lt; C.size(); ++i)</span><br><span class="line">    cout &lt;&lt; C[i] &lt;&lt; &#x27; &#x27;;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#Binary-Search-Tree&quot; class=&quot;headerlink&quot; title=&quot;Binary Search Tree&quot;&gt;&lt;/a&gt;Binary Search Tree&lt;/h1&gt;&lt;h2 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; class=&quot;headerlink&quot; title=&quot;set&quot;&gt;&lt;/a&gt;set&lt;/h2&gt;&lt;p&gt;自動排序，不允許重複的元素&lt;br&gt;常用的函數有insert(), erase(), count(), find()&lt;br&gt;&lt;a href=&quot;https://zerojudge.tw/ShowProblem?problemid=f277&quot;&gt;zerojudge 字典&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>2023-09-week1</title>
    <link href="http://yihsunphys.github.io/2023/08/29/23-09-w1/"/>
    <id>http://yihsunphys.github.io/2023/08/29/23-09-w1/</id>
    <published>2023-08-28T17:42:37.000Z</published>
    <updated>2023-09-10T09:35:59.965Z</updated>
    
    <content type="html"><![CDATA[<p>08&#x2F;28: 我期末考考的不太好ㄟ 可能之前確定A+後就都不讀了 但還是不太妙 以後要上課才行 我覺得觸控筆怪怪的 有點怕<br>08&#x2F;29: 整天都在做專題的東西 要把autocad的設計導入hfss弄了好久 結果發現根本搞錯地方 要融進原本畫好的模型又用好久 但結果也不太好<br>       用自己不熟悉的軟體真的頭痛<br>08&#x2F;30: 把宿舍東西整理整理 目前同時在看邏設 資結 eda 的開放式課程 另外還有自己讀演算法跟建中編的競程講義 跟解一些oj上的題目 想說之後去考個cpe之類的<br>       每天還是會害怕醒來 如果不要醒來就好了<br>08&#x2F;31: 搬宿舍一趟解決，超感謝室友多幫我拉一個籃子，不然我手一定會廢<br>09&#x2F;01: 自己煎了兩顆超油的蛋來吃 超好吃ㄟ 還騎車出門 覺得其實讀書真的是一件很輕鬆的事，甚至有點幸福<br>09&#x2F;02:  一直讀邏設<br>09&#x2F;03:  讀邏設，焦慮</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;08&amp;#x2F;28: 我期末考考的不太好ㄟ 可能之前確定A+後就都不讀了 但還是不太妙 以後要上課才行 我覺得觸控筆怪怪的 有點怕&lt;br&gt;08&amp;#x2F;29: 整天都在做專題的東西 要把autocad的設計導入hfss弄了好久 結果發現根本搞錯地方 要融進原本畫好的模型</summary>
      
    
    
    
    <category term="日記" scheme="http://yihsunphys.github.io/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2023-08-week4</title>
    <link href="http://yihsunphys.github.io/2023/08/23/23-08-w4/"/>
    <id>http://yihsunphys.github.io/2023/08/23/23-08-w4/</id>
    <published>2023-08-23T11:38:05.000Z</published>
    <updated>2023-08-28T17:40:23.401Z</updated>
    
    <content type="html"><![CDATA[<p>08&#x2F;21: 在家就甚麼都不會做 我訂了電腦! 是hp pavilion x36 觸控翻轉筆電$22888 ，終於可以體驗用平板寫筆記的感覺了嗎! 這台是經過我精挑細選而來，記憶體有16G以應付之後可能會用auto cad 畫3d的圖，cpu是i5-1235，可以快速充電，相信足以應付我的日常所需，他比我現在這台效能好兩倍吧，希望我會覺得他太好用了</p><p>08&#x2F;22:電腦沒來XD</p><p>08&#x2F;23: 去拔了智齒ㄟ，不過先拔一顆容易處理的，之後的水平智齒可能等寒假要去專門診所拔，但是要切肉我覺得好可怕&gt; &lt;</p><p>08&#x2F;24: 我真的覺得我的新電腦超級好玩，我用舊電腦時都不自覺去點螢幕哈哈笑死</p><p>08&#x2F;25: 嘴巴破皮真的生不如死</p><p>08&#x2F;26: 去夜市買超多東西吃 在新竹一直想這樣做 終於 還有我成功把部落格搬家到我的新電腦了耶 原本以為會很麻煩的說 真是太好了 這幾天讀了好多東西 </p><p>08&#x2F;27: 寫筆記真是件好玩的事 我在火車上做專題的模擬 結果甚麼鳥都沒做出來 還弄得頭很暈</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;08&amp;#x2F;21: 在家就甚麼都不會做 我訂了電腦! 是hp pavilion x36 觸控翻轉筆電$22888 ，終於可以體驗用平板寫筆記的感覺了嗎! 這台是經過我精挑細選而來，記憶體有16G以應付之後可能會用auto cad 畫3d的圖，cpu是i5-1235，可以</summary>
      
    
    
    
    <category term="日記" scheme="http://yihsunphys.github.io/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2023-08-week3</title>
    <link href="http://yihsunphys.github.io/2023/08/15/23-08-w3/"/>
    <id>http://yihsunphys.github.io/2023/08/15/23-08-w3/</id>
    <published>2023-08-15T12:57:02.000Z</published>
    <updated>2023-08-23T11:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>08&#x2F;13: 在火車上睡相超難看，而且完全忘了學校今日停電，躲去圖書館，在網路上遇到瘋子，today is not my day. 今日感觸: 網路上的人很恐怖</p><p>08&#x2F;14: 家長請喝了蘋果牛奶 是真的好喝喔  今天餓爛 在現實中遇到瘋子，在學餐買飯時，遇到可能是參加營隊的人在闖關，我被問有沒有ig，我說沒有，然後他就在我面前罵髒話了，超級不爽 : ) 我幹嘛幫你 </p><p>08&#x2F;15: 久違的練了口琴，今日吹 sonate f dur .  去找了教授討論專題的事，討論的很快! 買了家教國二的參考書，不過之後應該不接了，視訊我不知道怎麼弄，而且還是先買筆電好了，暫時不買平板。 喝了50嵐，好喝阿… </p><p>08&#x2F;16: 看了一部漫畫，校舍後方埋藏著天使，本來看了第一集覺得還不錯，期待後來的發展，結果結局好爛，情節也沒什麼爆點，而且偏扯。同類型的漫畫比較推薦三角草的春天，小說的話有一本叫復仇教室的，被欺負的環節我記得更慘，但都很扯就是了。不過我可能以前讀太多重口味的作品，現在看什麼都覺得給小孩子看的，嚇不到我了XD</p><p>08&#x2F;17: 我受夠我的頭髮了，為甚麼我的頭髮那麼多? 每次起床頭髮都呈現一個很奇怪的角度，有些髮絲還反重力似的往上飄，超奇怪。 看一看以前的照片又覺得短髮好像比較好看，決定下禮拜去剪掉好了，順便再燙，但我還在思考要剪到多短。 還有要拔智齒! 我整個臉因為智齒都不對稱了。  由於整天都在看不正常的漫畫，雖然是很好看啦，但整個人不太對勁了，有點害怕路上的人會突然殺掉我之類的笑死，竟然到今天才知道雨がっぱ少女群的漫畫，畫風很可愛而且故事超對我胃口&gt;&#x2F;&#x2F;&#x2F;&lt;。也看了這幾天很紅的山道猴子，我感覺很普通。  這幾天每餐都去吃交大的素食自助餐，因為很便宜，而且算健康吧哈哈</p><p>08&#x2F;18: 整天都在研究要買的筆電，找出了十幾台符合需求的 (一定要:記憶體16G, CPU i5以上  $30000以內  想要:螢幕15吋以上 有數字鍵 續航力佳) 然後看一看就對觸控筆電感到很有興趣，因為這樣就可以當平板用了，不過看了一下這種二合一又有符合我需求的大概只有聯想的flex系列，蠻便宜的大概20000，是我最想要的(阿但是他好像下架了!?)。性能最好的則是lg的gram，但是要30000 : (  其他也有納入考慮的是asus的vivobook和acer的swift3，都大約$25000</p><p>後來覺得二合一的螢幕都太小了! 打code眼睛會很吃力，還是買一台平板好了，筆電就買便宜的16吋，但是聽說非ipad的都很爛，ipad又很貴，還是要買acer二合一的11吋筆電，只要7000還比ipad便宜，帶出門還可以寫程式，不知道怎樣比較好QQ</p><p>08&#x2F;19: 從家教那裏拿到了一杯早餐店大冰奶和仙草 又回家了 我騎車超快 在中華西路上大概時速有70幾 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;08&amp;#x2F;13: 在火車上睡相超難看，而且完全忘了學校今日停電，躲去圖書館，在網路上遇到瘋子，today is not my day. 今日感觸: 網路上的人很恐怖&lt;/p&gt;
&lt;p&gt;08&amp;#x2F;14: 家長請喝了蘋果牛奶 是真的好喝喔  今天餓爛 在現實中遇到瘋子，</summary>
      
    
    
    
    <category term="日記" scheme="http://yihsunphys.github.io/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Linked list II</title>
    <link href="http://yihsunphys.github.io/2023/08/12/linkedlist2/"/>
    <id>http://yihsunphys.github.io/2023/08/12/linkedlist2/</id>
    <published>2023-08-11T18:17:06.000Z</published>
    <updated>2023-08-11T18:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>此篇筆記參考中山大學楊昌彪教授資料結構第三章ppt<br>先介紹基本的單向linked list，如何刪除和插入節點，以及結合兩個list還有翻轉，接著介紹cicukar list 雙向linked list以及用linked list實作stack和queue</p><h1 id="singly-linked-list-chain"><a href="#singly-linked-list-chain" class="headerlink" title="singly linked list(chain)"></a>singly linked list(chain)</h1><p>一個節點(node)代表一個element，每個節點有一個指標去連接到下一個節點，最後一個節點的指標NULL<br>以下是linked list的class宣告<span id="more"></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class ChainNode&#123;</span><br><span class="line">  friend class Chain; //Chain可使用ChainNode內的成員</span><br><span class="line">  public:</span><br><span class="line">    ChainNode(int element=0, ChainNode *next=0)&#123;//建構子</span><br><span class="line">      data=element; </span><br><span class="line">      link=next;</span><br><span class="line">    &#125; //預設data=0, *link=0</span><br><span class="line">  private:</span><br><span class="line">    int data;  //資料</span><br><span class="line">    ChainNode *link; //節點</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以下程式示範如何在節點x後再插入一個節點</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void Chain::Insert(ChainNode* x)&#123;</span><br><span class="line">  if(first) x-&gt;link=new  ChainNode(50, x-&gt;link);</span><br><span class="line">  else first=new ChainNode(50);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下程式示範如何在刪除節點x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void Chain::Delete(ChainNode *x, ChainNode *y)&#123;</span><br><span class="line">  if(x==first) first=first-&gt;link;</span><br><span class="line">  else y-&gt;link=x-&gt;link;</span><br><span class="line">  delete x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Template-Class"><a href="#Template-Class" class="headerlink" title="Template Class"></a>Template Class</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt; class ChainNode&#123;</span><br><span class="line">  friend class Chain &lt;T&gt;;</span><br><span class="line">  private:</span><br><span class="line">    T data;</span><br><span class="line">    ChainNode&lt;T&gt;* link;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;class T&gt; class Chain&#123;</span><br><span class="line">  public:</span><br><span class="line">    Chain()&#123;first=0;&#125;</span><br><span class="line">  private:</span><br><span class="line">    ChainNode&lt;T&gt; *first, *last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在list尾端插入一個節點</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void Chain&lt;T&gt;::InsertBack(T e)&#123;</span><br><span class="line">  if(first)&#123; //非空</span><br><span class="line">    last-&gt;link=new ChainNode&lt;T&gt;(e);</span><br><span class="line">    last=last-&gt;link;</span><br><span class="line">  &#125;</span><br><span class="line">  else first=last=new ChainNode&lt;T&gt;(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結合兩個list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">void Chain&lt;T&gt;::Concatenate(Chain&lt;T&gt; b)&#123; //b是接於this後的list</span><br><span class="line">  if (b.first==0) return; //b為空</span><br><span class="line">  if(first)&#123; //this不為空</span><br><span class="line">    last-&gt;link=b.first;</span><br><span class="line">    last=b.last;</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123; //this為空</span><br><span class="line">    first=b.first;</span><br><span class="line">    last=b.last;</span><br><span class="line">  &#125;</span><br><span class="line">  b.first=b.last=0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻轉一個list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void Chain&lt;T&gt;::Reverse()&#123;</span><br><span class="line">  ChainNode&lt;T&gt; *current=first, *previous=0; //先宣高兩個輔助節點</span><br><span class="line">  while (current)&#123;</span><br><span class="line">    ChainNode&lt;T&gt; *r=previous; //*r為前一個節點</span><br><span class="line">    previous=current; //previous往後移動到current</span><br><span class="line">    current=current-&gt;link; //current往後移動到下一個</span><br><span class="line">    previous-&gt;link=r; //翻轉指標指向</span><br><span class="line">  &#125;</span><br><span class="line">  first=previous; //first為最後一個節點</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Circular-linked-list"><a href="#Circular-linked-list" class="headerlink" title="Circular linked list"></a>Circular linked list</h1><p>最後一個節點又指回第一個節點則稱為circular linked list, 即last-&gt;link&#x3D;first.<br>以下程式法示範在circukar list前插入一個節點</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void CircularList&lt;T&gt;::InsertFront(T e)&#123;</span><br><span class="line">  ChainNode &lt;T&gt; *newNode=new ChainNode&lt;T&gt;(e);</span><br><span class="line">  if (last)&#123;</span><br><span class="line">    newNode-&gt;link=last-&gt;link;</span><br><span class="line">    last-&gt;link=newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123; //原表為空</span><br><span class="line">    last=newNode;</span><br><span class="line">    newNode-&gt;link=newNode;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="linked-stack"><a href="#linked-stack" class="headerlink" title="linked stack"></a>linked stack</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkedStack &lt;T&gt;::Push(T e) </span><br><span class="line">&#123;  top = new ChainNode &lt;T&gt;(e, top); </span><br><span class="line">   //新top: 資料為e 指標往下指為原top</span><br><span class="line">&#125;</span><br><span class="line">template &lt;class T&gt; </span><br><span class="line">void LinkStack &lt;T&gt;::Pop( ) &#123; </span><br><span class="line">  if (IsEmpty( )) </span><br><span class="line">    throw “Stack is empty. Cannot delete.”;</span><br><span class="line">  ChainNode &lt;T&gt; *delNode = top;</span><br><span class="line">  top = top-&gt;link;  // remove top node</span><br><span class="line">  delete delNode;   // 刪除原top</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="linked-queue"><a href="#linked-queue" class="headerlink" title="linked queue"></a>linked queue</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkedQueue &lt;T&gt;:: Push(const T&amp; e) </span><br><span class="line">&#123; </span><br><span class="line">  if (IsEmpty( )) // empty queue</span><br><span class="line">    front = rear = new ChainNode(e,0); </span><br><span class="line">  else </span><br><span class="line">    rear = rear-&gt;link = new ChainNode(e,0); </span><br><span class="line">&#125;</span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">void LinkedQueue &lt;T&gt;:: Pop()</span><br><span class="line">&#123;</span><br><span class="line">  if (IsEmpty()) </span><br><span class="line">    throw “Queue is empty. Cannot delete.”;</span><br><span class="line">  ChainNode&lt;T&gt; *delNode = front;</span><br><span class="line">  front = front-&gt;link;</span><br><span class="line">  // should be corrected by adding</span><br><span class="line">  if (front == 0) rear = 0; //只有一個節點 刪掉後便空</span><br><span class="line">  delete delNode;     // free the node</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Doubly-linked-list"><a href="#Doubly-linked-list" class="headerlink" title="Doubly linked list"></a>Doubly linked list</h1><p>有兩個指標，一個指向前一個節點，一個指向下一個節點</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class DblListNode&#123;</span><br><span class="line">  int data;</span><br><span class="line">  DblListNode *left, *right;</span><br><span class="line">&#125;;</span><br><span class="line">//刪除節點x</span><br><span class="line">x-&gt;left-&gt;right=x-&gt;right;</span><br><span class="line">x-&gt;right-&gt;left=x-&gt;left;</span><br><span class="line">//在x後插入一個節點p</span><br><span class="line">q=x-&gt;right; //命名原x後節點為q</span><br><span class="line">p-&gt;left=x;</span><br><span class="line">p-&gt;right=q;</span><br><span class="line">q-&gt;left=p;</span><br><span class="line">x-&gt;right=p;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;此篇筆記參考中山大學楊昌彪教授資料結構第三章ppt&lt;br&gt;先介紹基本的單向linked list，如何刪除和插入節點，以及結合兩個list還有翻轉，接著介紹cicukar list 雙向linked list以及用linked list實作stack和queue&lt;/p&gt;
&lt;h1 id=&quot;singly-linked-list-chain&quot;&gt;&lt;a href=&quot;#singly-linked-list-chain&quot; class=&quot;headerlink&quot; title=&quot;singly linked list(chain)&quot;&gt;&lt;/a&gt;singly linked list(chain)&lt;/h1&gt;&lt;p&gt;一個節點(node)代表一個element，每個節點有一個指標去連接到下一個節點，最後一個節點的指標NULL&lt;br&gt;以下是linked list的class宣告</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>2023-08-week2</title>
    <link href="http://yihsunphys.github.io/2023/08/10/23-08-w2/"/>
    <id>http://yihsunphys.github.io/2023/08/10/23-08-w2/</id>
    <published>2023-08-10T12:36:51.000Z</published>
    <updated>2024-06-27T14:45:02.204Z</updated>
    
    <content type="html"><![CDATA[<p>08&#x2F;06: 我忘了我在幹嘛  </p><p>08&#x2F;07: 考期中考，累到死，還好滿分破台，不過前面太緊張題目沒看清楚，浪費一堆時間。有吃家教家長請的蛋黃酥(抵午餐)</p><p>08&#x2F;08: 延續昨天的累，仍然超累，去吃了火焰鳥，隔壁桌鍋裡有火焰在燒，超酷</p><p>08&#x2F;09: 回家囉，牙痛頭痛眼睛痛，全身都在痛，幹。有吃家教家長切芒果，晚上用hfss</p><p>08&#x2F;10: 石二鍋很好吃，好幾天沒學新的資結和演算法了qq </p><p>08&#x2F;11: 好累 如果一天能睡24小時就好了，但我今天強迫自己讀完linked list了，再不讀寒假要去考資結簡直是笑話，不過進度已經比我想的要好很多了，暑假前還是一個完全不會寫程式的小白，花一個月已經學完程設+一半的資結，本來資結是資工系大二的必修，想說要很會寫程式後才能學，事實上我覺得只要熟悉基本語法就可以開始自修了，但也有可能是我學得太簡單，我前幾個禮拜有偷去寫清大暑修資結的作業，結果他們已經在教graph，我完全不會寫:(，明天可以開始學tree了。</p><p>08&#x2F;12: 去吃了夏慕尼，cp值不高，不如喝貢丸湯。 我很久沒失眠了，通常都是自主通宵，上學期好像通宵兩三次? 反正都是在讀書 : )  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;08&amp;#x2F;06: 我忘了我在幹嘛  &lt;/p&gt;
&lt;p&gt;08&amp;#x2F;07: 考期中考，累到死，還好滿分破台，不過前面太緊張題目沒看清楚，浪費一堆時間。有吃家教家長請的蛋黃酥(抵午餐)&lt;/p&gt;
&lt;p&gt;08&amp;#x2F;08: 延續昨天的累，仍然超累，去吃了火焰鳥，隔壁桌鍋</summary>
      
    
    
    
    <category term="日記" scheme="http://yihsunphys.github.io/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>2023-08-05日記</title>
    <link href="http://yihsunphys.github.io/2023/08/06/23-08-05/"/>
    <id>http://yihsunphys.github.io/2023/08/06/23-08-05/</id>
    <published>2023-08-05T16:53:43.000Z</published>
    <updated>2023-08-05T17:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天幾乎沒吃什麼東西，但完全不會餓，不過今天吃了一個還算好吃的布丁。我覺得我每天的日記都寫很少，以後一個禮拜發一篇好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這幾天幾乎沒吃什麼東西，但完全不會餓，不過今天吃了一個還算好吃的布丁。我覺得我每天的日記都寫很少，以後一個禮拜發一篇好了&lt;/p&gt;
</summary>
      
    
    
    
    <category term="日記" scheme="http://yihsunphys.github.io/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>大數運算 BigNumber</title>
    <link href="http://yihsunphys.github.io/2023/08/06/bignumber/"/>
    <id>http://yihsunphys.github.io/2023/08/06/bignumber/</id>
    <published>2023-08-05T16:53:31.000Z</published>
    <updated>2023-08-05T17:02:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>當題目要我們做大數運算時，通常測資會給連long long都存不下的值，這時只能將數字轉成字串並模擬運算的過程，當然答案也要轉成字串存取<span id="more"></span></p><h1 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">string add(string a, string b)&#123;</span><br><span class="line">    ini(a,b);</span><br><span class="line">    int temp;</span><br><span class="line">    int carry=0;</span><br><span class="line">    string s=&quot;&quot;; //答案字串</span><br><span class="line">    for(int i=a.size()-1;i&gt;=0;i--)&#123; //從字串最後方開始運算</span><br><span class="line">        temp=(a[i]-&#x27;0&#x27;)+(b[i]-&#x27;0&#x27;); //對單一位元做加法</span><br><span class="line">        s+=(temp+carry)%10+&#x27;0&#x27;; //結果存到字串</span><br><span class="line">        if(temp+carry&gt;9) carry=1; //進位</span><br><span class="line">        else carry=0;</span><br><span class="line">    &#125;</span><br><span class="line">    if(carry) s+=&#x27;1&#x27;; //最後如果還有進位字串要再加1</span><br><span class="line">    reverse(s.begin(),s.end()); //記得把字串倒回來</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="減法"><a href="#減法" class="headerlink" title="減法"></a>減法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void del(string &amp;s)&#123; //清除前綴0</span><br><span class="line">    while(s[0]==&#x27;0&#x27;) s.erase(0,1);</span><br><span class="line">&#125;</span><br><span class="line">string sub(string a, string b)&#123;</span><br><span class="line">    string s=&quot;&quot;;</span><br><span class="line">    bool k=0; //是否是負數</span><br><span class="line">    ini(a,b);</span><br><span class="line">    if(b&gt;a) &#123;</span><br><span class="line">        swap(a,b);</span><br><span class="line">        k=1;</span><br><span class="line">    &#125;</span><br><span class="line">    int temp;</span><br><span class="line">    for(int i=a.size()-1;i&gt;=0;i--)&#123;</span><br><span class="line">        if(a[i]&lt;b[i]) &#123;</span><br><span class="line">            temp=10-(b[i]-&#x27;0&#x27;)+(a[i]-&#x27;0&#x27;);</span><br><span class="line">            a[i-1]--;  //借位</span><br><span class="line">        &#125;</span><br><span class="line">        else temp=(a[i]-&#x27;0&#x27;)-(b[i]-&#x27;0&#x27;);</span><br><span class="line">        s+=temp+&#x27;0&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s.begin(),s.end());</span><br><span class="line">    if(s.size()!=1) del(s); //清除前綴0</span><br><span class="line">    if(k) s=&#x27;-&#x27;+s; </span><br><span class="line">    return s;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string mul(string a, string b)&#123;</span><br><span class="line">    string s=&quot;0&quot;;</span><br><span class="line">    for(int i=b.size()-1;i&gt;=0;i--)&#123;</span><br><span class="line">        int num=b[i]-&#x27;0&#x27;;</span><br><span class="line">        if(i!=b.size()-1) a+=&#x27;0&#x27;;</span><br><span class="line">        for(int i=0;i&lt;num;i++)&#123;</span><br><span class="line">            s=add(s,a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">string div(string a, string b)&#123;</span><br><span class="line">    string s=&quot;0&quot;;</span><br><span class="line">    if(Bisbigger(a,b)) return s;</span><br><span class="line">    else&#123;</span><br><span class="line">        string tmp=b;</span><br><span class="line">        string restmp=&quot;1&quot;;</span><br><span class="line">        for(int i=1;i&lt;(a.size()-b.size());i++)&#123;</span><br><span class="line">            tmp+=&#x27;0&#x27;;</span><br><span class="line">            restmp+=&#x27;0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        ini(a,b);</span><br><span class="line">        while(a&gt;=b)&#123;</span><br><span class="line">            ini(a,tmp);</span><br><span class="line">            if(a&gt;=tmp) &#123;</span><br><span class="line">                a=sub(a,tmp);</span><br><span class="line">                s=add(s,restmp);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                tmp.erase(tmp.size()-1);</span><br><span class="line">                restmp.erase(restmp.size()-1);</span><br><span class="line">            &#125;</span><br><span class="line">            ini(a,b); </span><br><span class="line">        &#125; </span><br><span class="line">        return s;  </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://zerojudge.tw/ShowProblem?problemid=a021">Zerojudge a021.大數運算</a></p><h3 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code "></a><font color=#008000>AC code </font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line">/*---------------------------------------*/</span><br><span class="line">void ini(string &amp;a, string &amp;b)&#123;</span><br><span class="line">    while(a.size()&lt;b.size()) a=&#x27;0&#x27;+a;</span><br><span class="line">    while(b.size()&lt;a.size()) b=&#x27;0&#x27;+b;</span><br><span class="line">&#125;</span><br><span class="line">bool Bisbigger(string a, string b)&#123;</span><br><span class="line">    if(a.size()==b.size()) return b[0]&gt;a[0];</span><br><span class="line">    else return b.size()&gt;a.size();</span><br><span class="line">&#125;</span><br><span class="line">void del(string &amp;s)&#123;</span><br><span class="line">    while(s[0]==&#x27;0&#x27;) s.erase(0,1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string add(string a, string b)&#123;</span><br><span class="line">    ini(a,b);</span><br><span class="line">    int temp;</span><br><span class="line">    int carry=0;</span><br><span class="line">    string s=&quot;&quot;;</span><br><span class="line">    for(int i=a.size()-1;i&gt;=0;i--)&#123;</span><br><span class="line">        temp=(a[i]-&#x27;0&#x27;)+(b[i]-&#x27;0&#x27;); </span><br><span class="line">        s+=(temp+carry)%10+&#x27;0&#x27;;</span><br><span class="line">        if(temp+carry&gt;9) carry=1;</span><br><span class="line">        else carry=0;</span><br><span class="line">    &#125;</span><br><span class="line">    if(carry) s+=&#x27;1&#x27;;</span><br><span class="line">    reverse(s.begin(),s.end());</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line">string sub(string a, string b)&#123;</span><br><span class="line">    string s=&quot;&quot;;</span><br><span class="line">    bool k=0;</span><br><span class="line">    ini(a,b);</span><br><span class="line">    if(b&gt;a) &#123;</span><br><span class="line">        swap(a,b);</span><br><span class="line">        k=1;</span><br><span class="line">    &#125;</span><br><span class="line">    int temp;</span><br><span class="line">    for(int i=a.size()-1;i&gt;=0;i--)&#123;</span><br><span class="line">        if(a[i]&lt;b[i]) &#123;</span><br><span class="line">            temp=10-(b[i]-&#x27;0&#x27;)+(a[i]-&#x27;0&#x27;);</span><br><span class="line">            a[i-1]--;</span><br><span class="line">        &#125;</span><br><span class="line">        else temp=(a[i]-&#x27;0&#x27;)-(b[i]-&#x27;0&#x27;);</span><br><span class="line">        s+=temp+&#x27;0&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s.begin(),s.end());</span><br><span class="line">    if(s.size()!=1) del(s);</span><br><span class="line">    if(k) s=&#x27;-&#x27;+s;</span><br><span class="line">    return s;</span><br><span class="line">&#125; </span><br><span class="line">string mul(string a, string b)&#123;</span><br><span class="line">    string s=&quot;0&quot;;</span><br><span class="line">    for(int i=b.size()-1;i&gt;=0;i--)&#123;</span><br><span class="line">        int num=b[i]-&#x27;0&#x27;;</span><br><span class="line">        if(i!=b.size()-1) a+=&#x27;0&#x27;;</span><br><span class="line">        for(int i=0;i&lt;num;i++)&#123;</span><br><span class="line">            s=add(s,a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line">string div(string a, string b)&#123;</span><br><span class="line">    string s=&quot;0&quot;;</span><br><span class="line">    if(Bisbigger(a,b)) return s;</span><br><span class="line">    else&#123;</span><br><span class="line">        string tmp=b;</span><br><span class="line">        string restmp=&quot;1&quot;;</span><br><span class="line">        for(int i=1;i&lt;(a.size()-b.size());i++)&#123;</span><br><span class="line">            tmp+=&#x27;0&#x27;;</span><br><span class="line">            restmp+=&#x27;0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        ini(a,b);</span><br><span class="line">        while(a&gt;=b)&#123;</span><br><span class="line">            ini(a,tmp);</span><br><span class="line">            if(a&gt;=tmp) &#123;</span><br><span class="line">                a=sub(a,tmp);</span><br><span class="line">                s=add(s,restmp);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                tmp.erase(tmp.size()-1);</span><br><span class="line">                restmp.erase(restmp.size()-1);</span><br><span class="line">            &#125;</span><br><span class="line">            ini(a,b); </span><br><span class="line">        &#125; </span><br><span class="line">        return s;  </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string a,b;</span><br><span class="line">    char c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;c&gt;&gt;b;</span><br><span class="line">    if(c==&#x27;+&#x27;) cout&lt;&lt;add(a,b)&lt;&lt;endl;</span><br><span class="line">    if(c==&#x27;-&#x27;) cout&lt;&lt;sub(a,b)&lt;&lt;endl;</span><br><span class="line">    if(c==&#x27;*&#x27;) cout&lt;&lt;mul(a,b)&lt;&lt;endl;</span><br><span class="line">    if(c==&#x27;/&#x27;) cout&lt;&lt;div(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;當題目要我們做大數運算時，通常測資會給連long long都存不下的值，這時只能將數字轉成字串並模擬運算的過程，當然答案也要轉成字串存取</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>String</title>
    <link href="http://yihsunphys.github.io/2023/08/06/string/"/>
    <id>http://yihsunphys.github.io/2023/08/06/string/</id>
    <published>2023-08-05T16:53:19.000Z</published>
    <updated>2023-08-05T17:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>c++ 中有寫好的string，只要引入標頭檔string就能使用，字串其實就是字元陣列，不過c++ 中有很多string的函數，使用上十分方便，且string能直接賦值，也能直接cout，不用像陣列一樣只能一個一個元素輸出</p><p>不過這邊先整理字串陣列(非string)常用的函數:<br>有strlen(), strcpy(), strcat(), strncat()<span id="more"></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">//cstring常用函數 用於字元陣列</span><br><span class="line">int main()&#123;</span><br><span class="line">    string s=&quot;123456789&quot;;</span><br><span class="line">    char str[100]=&quot;123456789&quot;;</span><br><span class="line">    cout&lt;&lt;strlen(str)&lt;&lt;endl; //算長度</span><br><span class="line">    strcpy(str,&quot;987654321&quot;); //複製字串到str</span><br><span class="line">    cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    strcat(str,&quot;abc&quot;); //複製字串到str後</span><br><span class="line">    cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    strncat(str,&quot;defgh&quot;,2); //複製字串的前n個位元到str後</span><br><span class="line">    cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;strcmp(str,&quot;987654321abcde&quot;); //兩字串一樣則結果為0 否則為1</span><br><span class="line">&#125;</span><br><span class="line">//輸出:</span><br><span class="line">9</span><br><span class="line">987654321</span><br><span class="line">987654321abc</span><br><span class="line">987654321abcde</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>接著介紹cctype</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cctype&gt;</span><br><span class="line">//cctype常用函數</span><br><span class="line">int main()&#123;</span><br><span class="line">    string s=&quot;12 aA&quot;; char str[]=&quot;12 aA&quot;;</span><br><span class="line">    for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">        cout&lt;&lt;s[i]&lt;&lt;&quot; is&quot;;</span><br><span class="line">        if(isalnum(s[i])) cout&lt;&lt;&quot; alnum&quot;; //是否是數字或字母</span><br><span class="line">        if(isalpha(s[i])) cout&lt;&lt;&quot; alpha&quot;; //是否是字母</span><br><span class="line">        if(isdigit(s[i])) cout&lt;&lt;&quot; num&quot;;  //是否是數字</span><br><span class="line">        if(isspace(s[i])) cout&lt;&lt;&quot; space&quot;; //是否是空白</span><br><span class="line">        if(islower(s[i])) cout&lt;&lt;&quot; lower&quot;; //是否是小寫字母</span><br><span class="line">        if(isupper(s[i])) cout&lt;&lt;&quot; upper&quot;; //是否是大寫字母</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    s[3]=toupper(s[3]); //小寫轉大寫</span><br><span class="line">    cout&lt;&lt;s[3];</span><br><span class="line">&#125;</span><br><span class="line">//輸出:</span><br><span class="line">1 is alnum num</span><br><span class="line">2 is alnum num</span><br><span class="line">  is space</span><br><span class="line">a is alnum alpha lower</span><br><span class="line">A is alnum alpha upper</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p>再來是string相關常用的函數，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    string s;</span><br><span class="line">    getline(cin, s);</span><br><span class="line">    //cin.getline()</span><br><span class="line">    //刪除尾端</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    s.pop_back();</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    //修改長度</span><br><span class="line">    s.resize(s.size()-2);</span><br><span class="line">    cout&lt;&lt;s;</span><br><span class="line">    //其他常用函數</span><br><span class="line">    // stod() stoi() stoll() stoull() to_string(num)</span><br><span class="line">    //cstlib常用函數(字元陣列轉數字) atoi() atoll() atof()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;c++ 中有寫好的string，只要引入標頭檔string就能使用，字串其實就是字元陣列，不過c++ 中有很多string的函數，使用上十分方便，且string能直接賦值，也能直接cout，不用像陣列一樣只能一個一個元素輸出&lt;/p&gt;
&lt;p&gt;不過這邊先整理字串陣列(非string)常用的函數:&lt;br&gt;有strlen(), strcpy(), strcat(), strncat()</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>C語言中的複合資料型態</title>
    <link href="http://yihsunphys.github.io/2023/08/06/struct/"/>
    <id>http://yihsunphys.github.io/2023/08/06/struct/</id>
    <published>2023-08-05T16:53:05.000Z</published>
    <updated>2023-08-05T17:04:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><p>當我們有多個不同類型的資料想要把他們綁在一起時，我們就可以使用struct這種資料型態，與c++中的class基本上是一樣的，只不過struct內不能有函數，且struct默認成員為public</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>我們想要把每個學生的姓名，班級和座號綁在一起，因此我們可以宣告一個名為student的struct<span id="more"></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct student&#123;</span><br><span class="line">    string name; //姓名</span><br><span class="line">    int cls;   //班級</span><br><span class="line">    int num;   //座號</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我們可以建造一個student類型的變數，並賦予它姓名，班級和座號</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">student std1; //宣告變數std1 類型為student</span><br><span class="line">std1.name=&quot;小明&quot;;</span><br><span class="line">std1.cls=2;</span><br><span class="line">std1.num=25;</span><br></pre></td></tr></table></figure><p>也可以宣告student類型的陣列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student array[100];</span><br><span class="line">for(int i=0;i&lt;100;i++)&#123;</span><br><span class="line">    cin&gt;&gt;a[i].name;</span><br><span class="line">    cin&gt;&gt;a[i].cls;</span><br><span class="line">    cin&gt;&gt;a[i].num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是兩題可以用struct做的題目</p><p><a href="https://zerojudge.tw/ShowProblem?problemid=f277">Zerojudge f277.嘿嘿想不到吧</a></p><h3 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a><font color=#008000>AC code</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);</span><br><span class="line">using namespace std;</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line">/*-------------------------------------*/</span><br><span class="line">struct student&#123;</span><br><span class="line">    string name;</span><br><span class="line">    int cls;</span><br><span class="line">    int num;</span><br><span class="line">    string s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool cmp(student std1, student std2)&#123;</span><br><span class="line">    if(std1.cls==std2.cls) return std1.num&lt;std2.num;</span><br><span class="line">    else return std1.cls&lt;std2.cls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;IOS;</span><br><span class="line">  int n;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  student a[100000];</span><br><span class="line">  for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">      cin&gt;&gt;a[i].name&gt;&gt;a[i].cls&gt;&gt;a[i].num&gt;&gt;a[i].s;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(a,a+n,cmp);</span><br><span class="line">  for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">      cout&lt;&lt;a[i].cls&lt;&lt;&quot; &quot;&lt;&lt;a[i].num&lt;&lt;&quot; &quot;&lt;&lt;a[i].name&lt;&lt;endl;</span><br><span class="line">      cout&lt;&lt;a[i].s&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://nthucp.cs.nthu.edu.tw/oj/contest/17/problem/2023E2HW9">NTHUUCPOJ 點排序</a></p><h3 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a><font color=#008000>AC code</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);</span><br><span class="line">using namespace std;</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line">/*-------------------------------------*/</span><br><span class="line">struct point&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    int d;</span><br><span class="line">&#125;;</span><br><span class="line">bool cmp(point p1,point p2)&#123;</span><br><span class="line">    if(p1.d==p2.d) &#123;</span><br><span class="line">      if(p1.x==p2.x) return p1.y&lt;p2.y;</span><br><span class="line">      else return p1.x&lt;p2.x;</span><br><span class="line">    &#125;</span><br><span class="line">    else return p1.d&lt;p2.d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">point a[100000];</span><br><span class="line">int main()&#123;IOS;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class="line">        a[i].d=pow(a[i].x,2)+pow(a[i].y,2);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a,a+n,cmp);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;a[i].x&lt;&lt;&quot; &quot;&lt;&lt;a[i].y&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="union"><a href="#union" class="headerlink" title="union"></a>union</h1><p>與struct類似，不過一次只能存取union的一種變數類型，因為裡頭的變數都是共用同一塊記憶體</p><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*-------------------------------*/</span><br><span class="line">union data&#123; //以下資料只能擇一存取</span><br><span class="line">    int n;</span><br><span class="line">    int n2;</span><br><span class="line">    double d;</span><br><span class="line">    float f;</span><br><span class="line">    char c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    data x;</span><br><span class="line">    x.c=&#x27;a&#x27;;</span><br><span class="line">    x.n=1; //前面宣告的x.c就沒用了</span><br><span class="line">    x.n2=2; //前面宣告的x.n也沒用</span><br><span class="line">    cout&lt;&lt;x.n&lt;&lt;x.n2; //只能印出x.n2的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外若union寫在struct裡可以不用宣告union的名稱，稱為匿名union</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct st&#123;</span><br><span class="line">  int n;</span><br><span class="line">  union&#123; //匿名union</span><br><span class="line">    double d;</span><br><span class="line">    char c;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h1><p>列舉是一組整數常數，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum week&#123;Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday&#125;;</span><br></pre></td></tr></table></figure><p> enum 列舉預設從 0 開始，後續的列舉項目如果後面不指定值的話預設會累加 1，以上面的例子來說印出Sunday的值為0，Monday為1…</p><p> 列舉也可以匿名與指定起始整數，例如<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum week&#123;Sunday, Monday, Tuesday=3, Wednesday, Thursday, Friday, Saturday&#125;;</span><br></pre></td></tr></table></figure><br>則印出Tuesday的值為3，而後面的項目會由3繼續累加，Wednesday為4，Thursday為5…</p><h3 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*-------------------------------*/</span><br><span class="line">enum &#123;a=5,b&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">   cout&lt;&lt;b;</span><br><span class="line">   int n=b;</span><br><span class="line">   cout&lt;&lt;n;</span><br><span class="line">&#125;</span><br><span class="line">//輸出66</span><br></pre></td></tr></table></figure><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p>參考就是變數的別名，在變數名稱前加上&amp;表示這是個參考變數，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int &amp;a=b //a是b的參考(別名)</span><br></pre></td></tr></table></figure><p>在上述例中，a和b共用同一塊記憶體，只是有兩個不同的名稱，對其中之一座任何操作，另外一者也會受到相同的影響</p><h3 id="範例-3"><a href="#範例-3" class="headerlink" title="範例"></a>範例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*-------------------------------*/</span><br><span class="line">int main()&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int &amp;x2=x;</span><br><span class="line">    x=5;</span><br><span class="line">    x*=2;</span><br><span class="line">    cout&lt;&lt;x2;</span><br><span class="line">&#125;</span><br><span class="line">//輸出10</span><br></pre></td></tr></table></figure><h1 id="指標"><a href="#指標" class="headerlink" title="指標"></a>指標</h1><p>指標是儲存記憶體位址 (address) 的資料型態(門牌)，在變數名稱前加上*代表這是個儲存指標的變數<br>而在變數前加上&amp;則代表取得此變數的記憶體位址</p><h3 id="範例-4"><a href="#範例-4" class="headerlink" title="範例"></a>範例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*-------------------------------*/</span><br><span class="line">int main()&#123;</span><br><span class="line">    int x=5;</span><br><span class="line">    //x_ptr是個指標 </span><br><span class="line">    int *x_ptr=&amp;x; //&amp;是取址運算子</span><br><span class="line">    cout&lt;&lt;x_ptr&lt;&lt;endl; //會印出記憶體的位址</span><br><span class="line">    *x_ptr=10; //將地址為x_ptr的記憶體(即x)值改為10</span><br><span class="line">    cout&lt;&lt;x; //輸出10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果採用指標方法存取struct或class時，存取成員方式必須使用箭頭-&gt;</p><h3 id="範例-5"><a href="#範例-5" class="headerlink" title="範例"></a>範例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct st&#123;</span><br><span class="line">    int x;</span><br><span class="line">    char c;</span><br><span class="line">    double d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">st *mystruct; //用指標宣告</span><br><span class="line">mystruct-&gt;x=5;</span><br><span class="line">mystruct-&gt;c=&#x27;a&#x27;;</span><br><span class="line">mystruct-&gt;d=0.01;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;struct&quot;&gt;&lt;a href=&quot;#struct&quot; class=&quot;headerlink&quot; title=&quot;struct&quot;&gt;&lt;/a&gt;struct&lt;/h1&gt;&lt;p&gt;當我們有多個不同類型的資料想要把他們綁在一起時，我們就可以使用struct這種資料型態，與c++中的class基本上是一樣的，只不過struct內不能有函數，且struct默認成員為public&lt;/p&gt;
&lt;h3 id=&quot;範例&quot;&gt;&lt;a href=&quot;#範例&quot; class=&quot;headerlink&quot; title=&quot;範例&quot;&gt;&lt;/a&gt;範例&lt;/h3&gt;&lt;p&gt;我們想要把每個學生的姓名，班級和座號綁在一起，因此我們可以宣告一個名為student的struct</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>迴溯法BackTracking</title>
    <link href="http://yihsunphys.github.io/2023/08/05/backtracking/"/>
    <id>http://yihsunphys.github.io/2023/08/05/backtracking/</id>
    <published>2023-08-04T16:51:53.000Z</published>
    <updated>2023-08-04T17:04:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>迴溯法是一種演算法，通常是用遞迴來枚舉各種可能的答案，不過當正在搜索的路徑已知不可能為答案時，就會回到上一步改搜索別條路，稱為剪枝。迴溯法跟演算法中的深度優先搜索(DFS)基本上是很像的東西，具體上的差異我也還不是很清楚，不過在程式中常用dfs()來代表使用迴溯法的函數。一個經典的題目是西洋棋中的八皇后問題，這裡另外提供兩個範例<span id="more"></span></p><h3 id="數獨Sudoku"><a href="#數獨Sudoku" class="headerlink" title="數獨Sudoku"></a>數獨Sudoku</h3><h5 id="範例輸入"><a href="#範例輸入" class="headerlink" title="範例輸入"></a>範例輸入</h5><p>.1……9<br>…3..8..<br>……6..<br>….124..<br>7.3……<br>5……..<br>8..6…..<br>….4..2.<br>…7…5.</p><h5 id="範例輸出"><a href="#範例輸出" class="headerlink" title="範例輸出"></a>範例輸出</h5><p>318456279<br>267391845<br>459287613<br>986512437<br>723964581<br>541873962<br>872635194<br>635149728<br>194728356</p><h3 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a><font color=#008000>AC code</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*-----------------------------*/</span><br><span class="line"></span><br><span class="line">bool row[9][10],col[9][10];</span><br><span class="line">bool sub[3][3][10];int grid[9][9];</span><br><span class="line">bool legal(int r, int c, int num)&#123;</span><br><span class="line">    return (!row[r][num])&amp;&amp;(!col[c][num])&amp;&amp;(!sub[r/3][c/3][num]);</span><br><span class="line">&#125;</span><br><span class="line">void print()&#123;</span><br><span class="line">    for(int i=0;i&lt;9;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;9;j++)  cout&lt;&lt;grid[i][j];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void dfs(int idx)&#123;</span><br><span class="line">    if(idx==81) &#123;</span><br><span class="line">        print();</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int r=idx/9,c=idx%9;</span><br><span class="line">    if(grid[r][c]) dfs(idx+1);</span><br><span class="line">    for(int i=1;i&lt;=9;i++)&#123;</span><br><span class="line">        if(legal(r,c,i))&#123;</span><br><span class="line">            grid[r][c]=i;</span><br><span class="line">            row[r][i]=col[c][i]=sub[r/3][c/3][i]=1;</span><br><span class="line">            dfs(idx+1);  </span><br><span class="line">            row[r][i]=col[c][i]=sub[r/3][c/3][i]=0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    grid[r][c]=0;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;   </span><br><span class="line">    for(int i=0;i&lt;9;i++)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        for(int j=0;j&lt;9;j++)&#123;</span><br><span class="line">            if(isdigit(s[j])) &#123;</span><br><span class="line">                int num=s[j]-&#x27;0&#x27;;</span><br><span class="line">                grid[i][j]=num;</span><br><span class="line">                row[i][num]=col[j][num]=sub[i/3][j/3][num]=1;</span><br><span class="line">            &#125;</span><br><span class="line">            else grid[i][j]=0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="M皇后N城堡"><a href="#M皇后N城堡" class="headerlink" title="M皇后N城堡"></a><a href="">M皇后N城堡</a></h3><p>在一個(M+N) x (M+N) 的棋盤上放M 個皇后 N 個城堡，皇后可走直走斜(八個方向的米字)，城堡只能走直(四個方向的十字)，所有的棋子互相不能吃掉對方。輸出有幾種合法的放法。輸入共一行，第一個整數代表M，第二個整數代表N</p><h5 id="範例輸入-1"><a href="#範例輸入-1" class="headerlink" title="範例輸入"></a>範例輸入</h5><p>3 1</p><h5 id="範例輸出-1"><a href="#範例輸出-1" class="headerlink" title="範例輸出"></a>範例輸出</h5><p>8</p><h3 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a><font color=#008000>AC code</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*---------------------------------*/</span><br><span class="line"></span><br><span class="line">bool q[100],diag[2][100], cas[100];</span><br><span class="line">int cd[2][100];</span><br><span class="line"></span><br><span class="line">int m,n,t=0; //m Queen n Castel t:total</span><br><span class="line">int sol=0, qnum=0, cnum=0;</span><br><span class="line">bool CheckQueen(int r, int c)&#123;</span><br><span class="line">    return (!cas[c]&amp;&amp;!q[c]&amp;&amp;!diag[0][r+c]&amp;&amp;!diag[1][r-c+t]&amp;&amp;cd[0][r+c]==0&amp;&amp;cd[1][r-c+t]==0&amp;&amp;qnum&lt;m);</span><br><span class="line">&#125;</span><br><span class="line">bool CheckCastel(int r, int c)&#123;</span><br><span class="line">    return (!q[c]&amp;&amp;!cas[c]&amp;&amp;!diag[0][r+c]&amp;&amp;!diag[1][r-c+t]&amp;&amp;cnum&lt;n);</span><br><span class="line">&#125;</span><br><span class="line">int dfs(int r)&#123;</span><br><span class="line">    if(r==t) &#123;</span><br><span class="line">        sol++; &#125;//cout&lt;&lt;&quot;sol&quot;&lt;&lt;endl;&#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        for(int c=0;c&lt;t;c++)&#123;</span><br><span class="line">            if(CheckCastel(r,c))&#123;</span><br><span class="line">                cnum++;</span><br><span class="line">                cas[c]=1;</span><br><span class="line">                cd[0][r+c]++;</span><br><span class="line">                cd[1][r-c+t]++; &lt;&lt;endl;</span><br><span class="line">                dfs(r+1);</span><br><span class="line">                cnum--;</span><br><span class="line">                cas[c]=0; </span><br><span class="line">                cd[0][r+c]--;</span><br><span class="line">                cd[1][r-c+t]--;</span><br><span class="line">            &#125;</span><br><span class="line">            if(CheckQueen(r,c))&#123;</span><br><span class="line">                    qnum++;</span><br><span class="line">                    q[c]=diag[0][r+c]=diag[1][r-c+t]=1; </span><br><span class="line">                    dfs(r+1);</span><br><span class="line">                    q[c]=diag[0][r+c]=diag[1][r-c+t]=0;</span><br><span class="line">                    qnum--;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return sol;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    memset(cd,0,sizeof(cd));</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    t=m+n;</span><br><span class="line">    dfs(0);</span><br><span class="line">    cout&lt;&lt;sol&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;迴溯法是一種演算法，通常是用遞迴來枚舉各種可能的答案，不過當正在搜索的路徑已知不可能為答案時，就會回到上一步改搜索別條路，稱為剪枝。迴溯法跟演算法中的深度優先搜索(DFS)基本上是很像的東西，具體上的差異我也還不是很清楚，不過在程式中常用dfs()來代表使用迴溯法的函數。一個經典的題目是西洋棋中的八皇后問題，這裡另外提供兩個範例</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>前綴和PartialSum</title>
    <link href="http://yihsunphys.github.io/2023/08/05/partialsum/"/>
    <id>http://yihsunphys.github.io/2023/08/05/partialsum/</id>
    <published>2023-08-04T16:51:34.000Z</published>
    <updated>2023-08-04T17:04:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>前綴和是當題目要我們算很多次區間和時，一個可以節省時間的方法，舉例來說，如果我們有一個長度為10000的陣列a[10000]，題目要我們算a[5000]~a[9999]的和，又要我們算a[0]~a[5000]的和，我們要兩次都要從頭加到尾，非常的耗時間，若是測資有很多筆，就有超時的危險，因此，我們可以先算出這個陣列的前綴和b[i]&#x3D;a[0]+a[1]+…+a[i]，這樣當題目要我們求出a[l]到a[r]的和時，只要將b[r]減掉b[r-1]就能得出答案<span id="more"></span></p><p>以下是一題求前綴和陣列的練習</p><p><a href="https://zerojudge.tw/ShowProblem?problemid=e339">Zerojudge e339.前綴和練習</a></p><h3 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a><font color=#008000>AC code</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define ll long long</span><br><span class="line">/*---------------------------------*/</span><br><span class="line"></span><br><span class="line">ll a[200005],b[200005]=&#123;&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">   int n;</span><br><span class="line">   cin&gt;&gt;n;</span><br><span class="line">   for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">      cin&gt;&gt;a[i];</span><br><span class="line">      if(i==0) b[i]=a[i];</span><br><span class="line">      else b[i]+=b[i-1]+a[i];</span><br><span class="line">   &#125;</span><br><span class="line">   for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">      cout&lt;&lt;b[i]&lt;&lt;&quot; \n&quot;[i==n-1];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前綴和是當題目要我們算很多次區間和時，一個可以節省時間的方法，舉例來說，如果我們有一個長度為10000的陣列a[10000]，題目要我們算a[5000]~a[9999]的和，又要我們算a[0]~a[5000]的和，我們要兩次都要從頭加到尾，非常的耗時間，若是測資有很多筆，就有超時的危險，因此，我們可以先算出這個陣列的前綴和b[i]&amp;#x3D;a[0]+a[1]+…+a[i]，這樣當題目要我們求出a[l]到a[r]的和時，只要將b[r]減掉b[r-1]就能得出答案</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>StringStream</title>
    <link href="http://yihsunphys.github.io/2023/08/05/stringstream/"/>
    <id>http://yihsunphys.github.io/2023/08/05/stringstream/</id>
    <published>2023-08-04T16:51:21.000Z</published>
    <updated>2023-08-04T16:58:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>c++中的stringstream函式拿來處理字串非常的方便，原因是他可以當作輸出輸入來使用。常用來分割字串和做字串的轉型<span id="more"></span></p><h5 id="範例-分割字串"><a href="#範例-分割字串" class="headerlink" title="範例: 分割字串"></a>範例: 分割字串</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;sstream&gt;</span><br><span class="line">//把字串當作輸入輸出使用</span><br><span class="line">int main()&#123;</span><br><span class="line">    string s=&quot;12 34 56&quot;;</span><br><span class="line">    stringstream ss(s);</span><br><span class="line">    int a=0;</span><br><span class="line">    while(ss&gt;&gt;a)&#123; \\輸入12 輸入34 輸入56</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="範例-字串轉型-string轉int"><a href="#範例-字串轉型-string轉int" class="headerlink" title="範例: 字串轉型(string轉int)"></a>範例: 字串轉型(string轉int)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*-------------------------------*/</span><br><span class="line">int main()&#123;</span><br><span class="line">    string s;</span><br><span class="line">    stringstream ss; //不建議重複宣告 耗cpu</span><br><span class="line">    while(getline(cin,s))&#123;</span><br><span class="line">        ss.str(&quot;&quot;); //初始化</span><br><span class="line">        ss.clear(); //初始化</span><br><span class="line">        ss&lt;&lt;s; //將字串放入stringstream</span><br><span class="line">        int sum=0;</span><br><span class="line">        int num;</span><br><span class="line">        //字串流變成輸入了</span><br><span class="line">        while(ss&gt;&gt;num)&#123;; //輸出成int格式</span><br><span class="line">        sum+=num;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上幾題stringstream的練習題</p><p><a href="https://zerojudge.tw/ShowProblem?problemid=d018">Zerojudge d018.字串讀取練習</a></p><h3 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a><font color=#008000>AC code</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*---------------------------------*/</span><br><span class="line">int main()&#123;</span><br><span class="line">   string s;</span><br><span class="line">   stringsream ss;</span><br><span class="line">   while(getline(cin,s))&#123;</span><br><span class="line">      ss.clear(); //初始化</span><br><span class="line">      ss.str(s);</span><br><span class="line">      int n;</span><br><span class="line">      double sum1=0; //奇數和</span><br><span class="line">      double sum2=0; //偶數和</span><br><span class="line">      while(ss&gt;&gt;n)&#123; //輸入序號</span><br><span class="line">         char c;</span><br><span class="line">         ss&gt;&gt;c; //輸入冒號</span><br><span class="line">         double x;</span><br><span class="line">         ss&gt;&gt;x; //輸入浮點數</span><br><span class="line">         if(n%2!=0) sum1+=x;</span><br><span class="line">         if(n%2==0) sum2+=x; </span><br><span class="line">      &#125;</span><br><span class="line">      cout&lt;&lt;sum1-sum2&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><a href="https://zerojudge.tw/ShowProblem?problemid=a271">Zerojudge a271.彩色蘿蔔</a></p><h3 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a><font color=#008000>AC code</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);</span><br><span class="line">using namespace std;</span><br><span class="line">#define ll long long</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line">/*-----------------------------------------*/</span><br><span class="line">int main()&#123;IOS;</span><br><span class="line">   int x,y,z,w,n,m;</span><br><span class="line">   int r;</span><br><span class="line">   cin&gt;&gt;r;</span><br><span class="line">   while(r--)&#123;</span><br><span class="line">      cin&gt;&gt;x&gt;&gt;y&gt;&gt;z&gt;&gt;w&gt;&gt;n&gt;&gt;m;</span><br><span class="line">      string s;</span><br><span class="line">      cin.ignore();</span><br><span class="line">      getline(cin,s);</span><br><span class="line">      //cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">      stringstream ss(s);</span><br><span class="line">      int a;</span><br><span class="line">      int k=0;</span><br><span class="line">      while(ss&gt;&gt;a)&#123;</span><br><span class="line">         //cout&lt;&lt;m;</span><br><span class="line">         /*if(m&lt;=0)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;bye~Rabbit\n&quot;;</span><br><span class="line">            break;</span><br><span class="line">         &#125;*/</span><br><span class="line">         m-=k*n;</span><br><span class="line">         if(m&lt;=0)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;bye~Rabbit\n&quot;;</span><br><span class="line">            break;</span><br><span class="line">         &#125;</span><br><span class="line">         if(a==1) m+=x; </span><br><span class="line">         if(a==2) m+=y;</span><br><span class="line">         if(a==3) m-=z;</span><br><span class="line">         if(a==4) &#123;</span><br><span class="line">            m-=w;</span><br><span class="line">            k++;</span><br><span class="line">         &#125;</span><br><span class="line">         if(m&lt;=0)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;bye~Rabbit\n&quot;;</span><br><span class="line">            break;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      //cout&lt;&lt;m;</span><br><span class="line">      if(m&gt;0) cout&lt;&lt;m&lt;&lt;&quot;g\n&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://zerojudge.tw/ShowProblem?problemid=d098">Zerojudge d098.Stringstream運用練習(C++)</a></p><h3 id="AC-code-2"><a href="#AC-code-2" class="headerlink" title="AC code"></a><font color=#008000>AC code</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*---------------------------------*/</span><br><span class="line">int main()&#123;</span><br><span class="line">   string s;</span><br><span class="line">   stringstream ss;</span><br><span class="line">   while(getline(cin,s))&#123; //一次讀一整行</span><br><span class="line">      int ans=0;</span><br><span class="line">      ss.clear(); //初始化</span><br><span class="line">      ss.str(s);  //讀入stringstream</span><br><span class="line">      string s2;</span><br><span class="line">      while(ss&gt;&gt;s2)&#123; //以空白分割字串</span><br><span class="line">         bool k=1;</span><br><span class="line">         //檢查字串是否為純數字</span><br><span class="line">         for(int i=0;i&lt;s2.size();i++)&#123;</span><br><span class="line">            if(isdigit(s2[i])) &#123;</span><br><span class="line">               k=1; </span><br><span class="line">               &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">               k=0;</span><br><span class="line">               break; </span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         //如果是 把字串轉為int並加到ans</span><br><span class="line">         if(k) ans+=stoi(s2);</span><br><span class="line">      &#125;</span><br><span class="line">      cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;c++中的stringstream函式拿來處理字串非常的方便，原因是他可以當作輸出輸入來使用。常用來分割字串和做字串的轉型</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>2023-08-04日記</title>
    <link href="http://yihsunphys.github.io/2023/08/04/23-08-04/"/>
    <id>http://yihsunphys.github.io/2023/08/04/23-08-04/</id>
    <published>2023-08-04T15:56:30.000Z</published>
    <updated>2023-08-04T16:01:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天一直想到以前的事，本來有點憂鬱，後來專心打code後好像就好一點了，我今天debug一題花了兩個小時&#x3D;&#x3D;，我超廢。外面風蠻大的，好像真的有一點颱風的感覺。看到別人去韓國玩，突然好想去韓國，那邊的東西看起來超好吃，跟新竹形成強烈對比</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天一直想到以前的事，本來有點憂鬱，後來專心打code後好像就好一點了，我今天debug一題花了兩個小時&amp;#x3D;&amp;#x3D;，我超廢。外面風蠻大的，好像真的有一點颱風的感覺。看到別人去韓國玩，突然好想去韓國，那邊的東西看起來超好吃，跟新竹形成強烈對比&lt;/p&gt;
</summary>
      
    
    
    
    <category term="日記" scheme="http://yihsunphys.github.io/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Infix, Postfix</title>
    <link href="http://yihsunphys.github.io/2023/08/04/postfix/"/>
    <id>http://yihsunphys.github.io/2023/08/04/postfix/</id>
    <published>2023-08-04T15:46:26.000Z</published>
    <updated>2023-08-04T16:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我們平常寫運算式都是使用Infix(中序)，如1+1就是Infix，而若用postfix(後序)表示會寫成11+，寫成prefix(前序)則是+11</p><h1 id="infix-to-postfix"><a href="#infix-to-postfix" class="headerlink" title="infix to postfix"></a>infix to postfix</h1><p>遇到比較長且複雜的運算式，我們要怎麼將infix轉成postfix呢? 首先要先找到最優先的運算括號起來，並將運算子移到此運算最後方，依序移動所有運算子後把所有括號去掉就好了，以下是一個例子<span id="more"></span><br>ex. A+B*C -&gt; A+(B*C) -&gt; A+(BC*) -&gt; A(BC*)+ -&gt; ABC*+</p><p>我們也可以先畫出infix的expression tree，並由以下順序重新寫下運算式的postfix和prefix</p><p>inorder traversal: 1.left subtree 2.root 3.right subtree<br>preorder traversal: 1.root 2.left subtree 3.right subtree<br>postorder traversal: 1.left subtree 2.right subtree 3.root</p><p>而實現infix to postfix 的演算法會用到stack，想法是從運算式最左邊開始讀值，遇到數字直接輸出，遇到運算子則放入stack，若stack內已有資料，則需先將stack內比欲放入的運算子優先順序要高的運算子都拿出來並輸出，再放入資料，也就是優先順序較高的運算子要疊在優先順序較低的運算子上面</p><p>若運算式中有括號，左括號放入後，其他運算子都可以疊在上面，直到右括號放入，須把之間所有運算子提出，再將左右括號相抵</p><p>以下是一題實作infix轉postfix的題目，附上連結和AC code</p><p><a href="https://zerojudge.tw/ShowProblem?problemid=f377">Zerojudge f377.運算式轉換</a> </p><h3 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a><font color=#008000>AC code</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">/*----------------------------*/</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    map&lt;char,int&gt; mp;</span><br><span class="line">    //定義各運算子優先序</span><br><span class="line">    mp[&#x27;+&#x27;]=1;mp[&#x27;-&#x27;]=1;mp[&#x27;*&#x27;]=2;mp[&#x27;/&#x27;]=2;mp[&#x27;(&#x27;]=0; </span><br><span class="line">    string s;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    stack &lt;char&gt; stk;</span><br><span class="line">    while(getline(cin,s))&#123;</span><br><span class="line">        ss.clear();</span><br><span class="line">        ss.str(&quot;&quot;);</span><br><span class="line">        ss&lt;&lt;s;</span><br><span class="line">        char c;</span><br><span class="line">        while(ss&gt;&gt;c)&#123;</span><br><span class="line">            if(c&lt;=&#x27;z&#x27;&amp;&amp;c&gt;=&#x27;a&#x27;) cout&lt;&lt;c&lt;&lt;&quot; &quot;; //是字母直接印出</span><br><span class="line">            else&#123;</span><br><span class="line">                //如果是右括號 拿出stack內元素直到左括號</span><br><span class="line">                if(c==&#x27;)&#x27;)&#123; </span><br><span class="line">                    while(stk.top()!=&#x27;(&#x27;)&#123;</span><br><span class="line">                        cout&lt;&lt;stk.top()&lt;&lt;&quot; &quot;;</span><br><span class="line">                        stk.pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                    stk.pop();</span><br><span class="line">                &#125; </span><br><span class="line">                //左括號直接放入stack</span><br><span class="line">                else if(c==&#x27;(&#x27;) &#123;</span><br><span class="line">                    stk.push(c); </span><br><span class="line">                &#125;        </span><br><span class="line">                else&#123;</span><br><span class="line">                    if(!stk.empty())&#123;</span><br><span class="line">                        //優先序較高的運算子疊在較低的運算子上，否則從stack拿出</span><br><span class="line">                        while(!stk.empty()&amp;&amp;mp[c]&lt;=mp[stk.top()])&#123;</span><br><span class="line">                        cout&lt;&lt;stk.top()&lt;&lt;&quot; &quot;;</span><br><span class="line">                        stk.pop();</span><br><span class="line">                        &#125;   </span><br><span class="line">                    &#125;</span><br><span class="line">                    stk.push(c);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //印出stack內剩餘元素</span><br><span class="line">        while(!stk.empty()) &#123;</span><br><span class="line">            cout&lt;&lt;stk.top()&lt;&lt;&quot; &quot;;</span><br><span class="line">            stk.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;我們平常寫運算式都是使用Infix(中序)，如1+1就是Infix，而若用postfix(後序)表示會寫成11+，寫成prefix(前序)則是+11&lt;/p&gt;
&lt;h1 id=&quot;infix-to-postfix&quot;&gt;&lt;a href=&quot;#infix-to-postfix&quot; class=&quot;headerlink&quot; title=&quot;infix to postfix&quot;&gt;&lt;/a&gt;infix to postfix&lt;/h1&gt;&lt;p&gt;遇到比較長且複雜的運算式，我們要怎麼將infix轉成postfix呢? 首先要先找到最優先的運算括號起來，並將運算子移到此運算最後方，依序移動所有運算子後把所有括號去掉就好了，以下是一個例子</summary>
    
    
    
    <category term="cs note" scheme="http://yihsunphys.github.io/categories/cs-note/"/>
    
    
  </entry>
  
  <entry>
    <title>2023-08-03日記</title>
    <link href="http://yihsunphys.github.io/2023/08/03/23-08-03/"/>
    <id>http://yihsunphys.github.io/2023/08/03/23-08-03/</id>
    <published>2023-08-03T13:31:18.000Z</published>
    <updated>2023-08-03T13:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天去吃了學餐內的小火鍋，為了可以盡情吃冰淇淋，終於吃到甜的東西了，突然想要戒糖一個禮拜的原因是我不知道在fb還是dcard看到農場文章的標題寫「不吃甜食一個星期，身體出現驚人變化」，我很容易被這種標題吸引。不過我不覺得我身體有出現甚麼變化，反而還長了幾顆痘痘，天啊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天去吃了學餐內的小火鍋，為了可以盡情吃冰淇淋，終於吃到甜的東西了，突然想要戒糖一個禮拜的原因是我不知道在fb還是dcard看到農場文章的標題寫「不吃甜食一個星期，身體出現驚人變化」，我很容易被這種標題吸引。不過我不覺得我身體有出現甚麼變化，反而還長了幾顆痘痘，天啊&lt;/p&gt;</summary>
      
    
    
    
    <category term="日記" scheme="http://yihsunphys.github.io/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
</feed>
